#include <iostream>
using namespace std;
 
template <class T>
class BST {
    private:
        struct Node {
            T val;
            Node *left;
            Node *right;
            Node (T v = T(), Node *l = nullptr, Node *r = nullptr) : val(v), left(l), right(r){}
        };
        Node *root;
       
        void add(Node *& node, T x) {
            if (node == nullptr) {
                node = new Node(x);
            }
            else if (x < node -> val) {
                add(node -> left, x);
            }
            else {
                add(node -> right, x);
            }
        }
       
        Node *min(Node *node){
            while (node && node -> left != nullptr) {
                node = node -> left;
            }
            return node;
        }
 
        Node *erase(Node *node, T x) {
            if (node == nullptr) {
                return node;
            }
            else if (x < node -> val) {
                node -> left = erase(node -> left, x);
            }
            else if (x > node -> val) {
                node -> right = erase(node -> right, x);
            }
            else {
                if (node -> left == nullptr) {
                    Node *temp = node -> right;
                    delete node;
                    return temp;
                }
                else if (node -> right == nullptr) {
                    Node *temp = node -> left;
                    delete node;
                    return temp;
                }
            Node *minNode = min(node -> right);
            node -> val = minNode -> val;
            node -> right = erase(node -> right, node -> val);
            }
            return node;
        }
 
        void print(Node *cur, int rank = 0) {
            if (!cur) return;
            print(cur->right, rank + 1);
            cout << string(rank * 4, ' ') << cur->val << endl;
            print(cur->left, rank + 1);
        }
    public:
        BST() {
            root = nullptr;
        }
        void add(T val) {
            return add(root, val);
        }
        void erase(T val) {
            erase(root, val);
        }
        void print() {
            return print(root);
        }
};
 
int main() {
    BST<int> tree;
    tree.add(50);
    tree.add(30);
    tree.add(70);
    tree.add(20);
    tree.add(40);
    tree.add(60);
    tree.add(80);
    tree.print();
    cout << endl;
    tree.erase(50);
    tree.print();
    cout << endl;
 
    return 0;
}
